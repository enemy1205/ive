cmake_minimum_required(VERSION 3.2.2)

set(CVI_IVE_SO_VERSION 0)
set(CVI_IVE_MAJOR_VERSION "${CVI_IVE_SO_VERSION}.0.5")

# Options
option(ENABLE_SYSTRACE "Use systrace" OFF)

if (ENABLE_SYSTRACE)
  if(EXISTS "${CMAKE_SOURCE_DIR}/3rdparty/tracer")
    message("Tracer folder found.")
  else()
    message(FATAL_ERROR "Tracer folder not found. Git clone to 3rdparty at http://10.34.33.3:8480/sys_app/tracer.")
  endif()
  add_definitions(-DENABLE_TRACE)
endif()

if ("${CMAKE_BUILD_TYPE}" STREQUAL "")
  set(CMAKE_BUILD_TYPE "Release")
endif()
if("${BM_TARGET}" STREQUAL "soc")
  set(BMTAP2_TARGET_BASENAME soc_bm1880v2)
  if ("${CMAKE_INSTALL_PREFIX}" STREQUAL "/usr/local")
    set(CMAKE_INSTALL_PREFIX "${CMAKE_CURRENT_SOURCE_DIR}/install_soc")
  endif()
  # Find toolchain cmake file and toolchain folder
  if("${CMAKE_TOOLCHAIN_FILE}" STREQUAL "")
    message(FATAL_ERROR "CMAKE_TOOLCHAIN_FILE is not set. Aborting.")
  endif()
  if(NOT DEFINED TOOLCHAIN_ROOT_DIR)
    message(FATAL_ERROR "TOOLCHAIN_ROOT_DIR is not set. Aborting.")
  endif()
  set(USE_TOOLCHAIN "true")
  include(cmake/soc.cmake)
else()
  set(BMTAP2_TARGET_BASENAME cmodel_bm1880v2)
  if ("${CMAKE_INSTALL_PREFIX}" STREQUAL "/usr/local")
    set(CMAKE_INSTALL_PREFIX "${CMAKE_CURRENT_SOURCE_DIR}/install")
  endif()
  set(USE_TOOLCHAIN "false")
  include(cmake/FindGlog.cmake)
endif()
include(cmake/bmtap2.cmake)
set(MIDDLEWARE_TARGET_BASENAME middleware)
include(cmake/middleware.cmake)

set(CMAKE_C_INIT "-fsigned-char -Werror=all -fdiagnostics-color=always")
set(CMAKE_CXX_INIT "-fsigned-char -fPIC -Werror=all -fdiagnostics-color=always -Wno-unused-variable -std=gnu++11")
if("${CMAKE_BUILD_TYPE}" STREQUAL "Release")
    set( CMAKE_C_FLAGS "${CMAKE_C_INIT} -O3" )
    set( CMAKE_CXX_FLAGS "${CMAKE_CXX_INIT} -O3" )
elseif("${CMAKE_BUILD_TYPE}" STREQUAL "Debug")
    set( CMAKE_C_FLAGS "${CMAKE_C_INIT} -g -O0" )
    set( CMAKE_CXX_FLAGS "${CMAKE_CXX_INIT} -g -O0" )
elseif("${CMAKE_BUILD_TYPE}" STREQUAL "Asan")
    set( CMAKE_C_FLAGS "${CMAKE_C_INIT} -g -O0 -fsanitize=address" )
    set( CMAKE_CXX_FLAGS "${CMAKE_CXX_INIT} -g -O0 -fsanitize=address" )
elseif("${CMAKE_BUILD_TYPE}" STREQUAL "Tsan")
    set( CMAKE_C_FLAGS "${CMAKE_C_INIT} -g -O0 -fsanitize=thread" )
    set( CMAKE_CXX_FLAGS "${CMAKE_CXX_INIT} -g -O0 -fsanitize=thread" )
elseif("${CMAKE_BUILD_TYPE}" STREQUAL "UBsan")
    if (CMAKE_C_COMPILER STREQUAL "/usr/bin/cc")
      messgae(FATAL_ERROR "UBsan only supports clang compiler. Please export C and CXX compiler to clang.")
    endif()
    set( CMAKE_C_FLAGS "${CMAKE_C_INIT} -g -O0 -fsanitize=undefined" )
    set( CMAKE_CXX_FLAGS "${CMAKE_CXX_INIT} -g -O0 -fsanitize=undefined" )
    set( CMAKE_EXE_LINKER_FLAGS "-lubsan")
else()
    message(FATAL_ERROR "No build type!!!")
endif()

message("==================================================")
message("[Summary]")
message("C   compiler ${CMAKE_C_COMPILER}")
message("CXX compiler ${CMAKE_CXX_COMPILER}")
message("Target       ${BM_TARGET}")
message("Build type   ${CMAKE_BUILD_TYPE}")
message("Install dir  ${CMAKE_INSTALL_PREFIX}")
message("Use Systrace ${ENABLE_SYSTRACE}")
message("==================================================")

# add_subdirectory(tpu_math)
add_subdirectory(src)
add_subdirectory(test)
